{"version":3,"file":"synth-kit.js","sources":["../lib/core.js","../lib/synth.js","../lib/kit/gain.js","../lib/kit/gain-envelope.js","../lib/kit/mono-buffer.js","../lib/kit/source.js","../lib/kit/noise.js","../lib/kit/sample.js","../lib/kit/pulse.js","../lib/kit/vca.js","../lib/kit/osc.js","../lib/kit/vco.js","../lib/kit/filter.js","../lib/kit/vcf.js","../lib/instruments/kick.js","../lib/instruments/snare.js","../lib/instruments/hat.js","../lib/instruments/cowbell.js","../lib/instruments/conga.js","../lib/instruments/tom.js","../lib/instruments/monosynth.js","../lib/index.js"],"sourcesContent":["const isString = (o) => typeof o === \"string\"\nconst isFn = (o) => typeof o === \"function\"\nconst { exp, E } = Math\n\nexport function ampToGain (amp) {\n  return (exp(amp) - 1) / (E - 1)\n}\n\n/**\n * Update a node property with a value. If the property is a parameter and\n * the value is a node, it will connect them\n */\nexport function plug (node, name, value) {\n  const target = node[name]\n  if (isFn(value)) value = value()\n  if (target === undefined || value === undefined || value === null) {\n    // ignore\n  } else if (target.value !== undefined) {\n    // it's a parameter\n    if (isFn(value.connect)) {\n      value.connect(target)\n    } else {\n      target.setValueAtTime(value, 0)\n    }\n  } else {\n    // replace the old value with a new one\n    node[name] = value\n  }\n}\n\n/**\n * Update a node\n */\nexport function update (node, newState, initialState) {\n  if (initialState) node.state = Object.assign({}, initialState)\n  else if (!node.state) node.state = {}\n\n  if (newState) {\n    const state = node.state\n    // diffing algorithm\n    Object.keys(newState).forEach(key => {\n      const newValue = newState[key]\n      const prevValue = state[key]\n      if (newValue !== prevValue) {\n        plug(node, key, newValue)\n        state[key] = newValue\n      }\n    })\n  }\n  return node\n}\n\nexport function polyphony (init, options = {}) {\n  const max = options.maxVoices || 16\n  const voices = []\n  for (var i = 0; i < max; i++) voices[i] = init()\n  let current = -1\n\n  return function next () {\n    current = (current + 1) % max\n    return voices[current]\n  }\n}\n\nexport function connected (object, connections) {\n  connections.reduce((src, next) => {\n    if (isString(src)) src = object[src]\n    if (isString(next)) next = object[next]\n    src.connect(next)\n    return next\n  })\n  return object\n}\n\nexport function connect (...nodes) {\n  nodes.reduce((prev, next) => {\n    prev.connect(next)\n    return next\n  })\n  return nodes\n}\n\n/**\n * Create a connect function with for the given node\n * The return function have two special characteristics:\n * - It's chainable\n * - It accepts `true` as param to connect to node's AudioContext's destination\n */\nexport function connectWith (node, parent) {\n  if (!parent) throw Error(\"no parent!\")\n  const conn = node.connect\n  return function (dest) {\n    if (dest === true) conn.call(node, node.context.destination)\n    else conn.apply(node, arguments)\n    return parent\n  }\n}\n","// const isString = (o) => typeof o === \"string\"\nconst isFn = (o) => typeof o === \"function\"\nconst { exp, E } = Math\n\nexport function ampToGain (amp) {\n  return (exp(amp) - 1) / (E - 1)\n}\n\nexport function instrument (config) {\n  const inst = {}\n  const names = Object.keys(config)\n  names.forEach(key => {\n    const [node, to] = config[key]\n    inst[key] = node\n    if (to === \"output\") setOutput(inst, node)\n    else connect(node, config[to][0])\n  })\n  inst.update = (state) => {\n    if (state) {\n      names.forEach(key => {\n        inst[key].update(state[key])\n      })\n    }\n    return inst\n  }\n  inst.inspect = () => names.reduce((state, name) => {\n    state[name] = inst[name].inspect()\n    return state\n  }, {})\n  return inst\n}\n\nexport function createAudioNode (ac, type, params, initParam) {\n  const node = ac[\"create\" + type](initParam)\n  node.update = (state) => {\n    if (state) {\n      params.forEach(name => {\n        plug(node, name, state[name])\n      })\n    }\n    return node\n  }\n  node.inspect = () => params.reduce((state, name) => {\n    state[name] = inspect(node, name)\n    return state\n  }, {})\n  return node\n}\n\n// Get the value of a node parameter\nexport function inspect (node, name) {\n  const value = node[name]\n  return value && value.value !== undefined ? value.value : value\n}\n\n/**\n * Update a node property with a value. If the property is a parameter and\n * the value is a node, it will connect them\n */\nexport function plug (node, name, value) {\n  const target = node[name]\n  if (isFn(value)) value = value()\n  if (value === undefined || target === undefined) {\n    // ignore\n  } else if (target.value !== undefined) {\n    // it's a parameter\n    if (isFn(value.connect)) {\n      value.connect(target)\n    } else {\n      target.value = value\n      target.setValueAtTime(value, 0)\n    }\n  } else {\n    // replace the old value with a new one\n    node[name] = value\n  }\n}\n\nfunction connect (node, dest) {\n  if (dest) node.connect(dest)\n}\n\n/**\n * Set the output of a node (by creating a new connect function)\n */\nexport function setOutput (inst, node) {\n  inst.connect = (dest) => {\n    if (dest === true) dest = node.context.destination\n    node.connect(dest)\n    return inst\n  }\n}\n\nexport function withDefaults (config, defaults) {\n  return config ? Object.assign({}, defaults, config) : defaults\n}\n","// # Gain\nimport { createAudioNode } from \"../synth\"\n\n// Gain produces changes in volume\n\n/**\n * Create a Gain node.\n */\nexport default function Gain (ac, state) {\n  return createAudioNode(ac, \"Gain\", Gain.params).update(state)\n}\nGain.params = [\"gain\"]\n","import Gain from \"./gain\"\n\nconst SILENCE = { gain: 0 }\n/**\n * Create a Gain envelope. Any audio source can be connected to an\n * audio envelope.\n *\n * @example\n * const [osc, adsr] = connect(Osc(ac), GainEnvelope(ac))\n * adsr.trigger()\n */\nexport default function GainEnvelope (ac, state) {\n  const env = Gain(ac, SILENCE)\n  state = Object.assign({}, GainEnvelope.defaultState, state)\n\n  env.update = (newState) => {\n    state = Object.assign(state, newState)\n    return env\n  }\n  env.inspect = () => state\n\n  env.trigger = function (time, dur) {\n    if (!time) time = ac.currentTime\n    const release = triggerAdsr(time, env.gain, state)\n    if (dur) release(time + dur)\n    return release\n  }\n  return env\n}\n\nGainEnvelope.params = [\n  \"base\",\n  \"peak\",\n  \"attack\",\n  \"decay\",\n  \"sustain\",\n  \"release\",\n]\n\n// default values\nGainEnvelope.defaultState = {\n  gain: 1,\n  attack: 0.01,\n  decay: 0.2,\n}\n\nexport function triggerAdsr (time, param, adsr) {\n  param.cancelScheduledValues(0)\n\n  // attack phase\n  const attack = adsr.attack || 0.01\n  const peak = adsr.gain || 1\n  param.setValueAtTime(0, time)\n  time += attack\n  param.linearRampToValueAtTime(peak, time)\n\n  // decay phase\n  const decay = adsr.decay || 0.01\n  const sustain = adsr.sustain || 0\n  time += decay\n  param.linearRampToValueAtTime(sustain, time)\n\n  // hold phase\n  const hold = adsr.hold || 0\n  if (hold) {\n    time += hold\n    param.setValueAtTime(sustain, time)\n  }\n\n  const release = time => {\n    const release = adsr.release || 0\n    time += release\n    param.exponentialRampToValueAtTime(0.00001, time)\n  }\n\n  // trigger release if hold is specified\n  if (sustain && hold) {\n    release(time)\n  }\n\n  return release\n}\n","// # Buffer (Mono)\n\n/**\n * Create a MonoBuffer using a generator function\n */\nexport default function MonoBuffer (ac, samples, generator, inverse = false) {\n  const buffer = ac.createBuffer(1, samples, ac.sampleRate)\n  const data = buffer.getChannelData(0)\n  for (let i = 0; i < samples; i++) {\n    data[i] = generator(inverse ? samples - i : i)\n  }\n  return buffer\n}\n","// # Source\nimport { createAudioNode } from \"../synth\"\n\n// Create a node that plays audio from a buffer\n\n/**\n * Create a (Buffer)Source node\n */\nexport default function Source (ac, buffer, state) {\n  const source = createAudioNode(ac, \"BufferSource\", Source.params)\n  source.update(state)\n  source.buffer = buffer\n  return source\n}\n\nSource.params = [\"detune\", \"loop\", \"loopStart\", \"loopEnd\", \"playbackRate\"]\n","// # Noise\nimport MonoBuffer from \"./mono-buffer\"\nimport Source from \"./source\"\n\n/**\n * Create a Noise oscillator\n *\n * @param {AudioContext} ac\n * @param {Object} [config]\n * - type: the noise type. Can be \"white\" (by default)\n * - duration: the duration in seconds\n * @return {AudioNode} the noise node\n */\nexport default function Noise (ac, config) {\n  config = Object.assign({}, Noise.defaults, config)\n  const samples = config.duration * ac.sampleRate\n  const buffer = MonoBuffer(ac, samples, () => Math.random() * 2 - 1)\n  const noise = Source(ac, buffer, { loop: true })\n  noise.start()\n  return noise\n}\nNoise.defaults = {\n  duration: 1,\n  loop: true\n}\n","// # Sample\nimport Gain from \"./gain\"\nimport Source from \"./source\"\n\n// A sample is a re-triggerable audio buffer source.\n\n/**\n * Create a Sample\n *\n * @param {AudioContext} context\n * @param {AudioBuffer} buffer\n * @param {Object} [state]\n */\nexport default function Sample (ac, buffer, config) {\n  const sample = Gain(ac)\n\n  sample.trigger = (time, dur) => {\n    if (!time) time = ac.currentTime\n    const source = Source(ac, buffer, config)\n    source.connect(sample)\n    source.onended = () => {\n      if (sample.onended) sample.onended()\n      source.disconnect()\n    }\n    source.start(time)\n  }\n  return sample\n}\n\nSample.state = {\n  gain: 0.8\n}\n","// # Pulse\nimport MonoBuffer from \"./mono-buffer\"\nimport Sample from \"./sample\"\n\n/**\n * Create a Pulse audio node\n *\n * @param {AudioContext} ac\n * @param {Object} [config]\n * - type: the pulse type. Can be \"white\" (by default)\n * - duration: the duration in seconds\n * @return {AudioNode} the pulse node\n */\nexport default function Pulse (ac, config) {\n  config = Object.assign({}, Pulse.defaults, config)\n  const samples = config.duration * ac.sampleRate\n  const buffer = MonoBuffer(ac, samples, () => Math.random() * 2 - 1)\n  const pulse = Sample(ac, buffer)\n  return pulse\n}\nPulse.defaults = {\n  duration: 0.001\n}\n","// Voltage controlled amplified\nimport Gain from \"./gain\"\n\n/**\n * Create a VCA\n */\nexport default function VCA (ac, config) {\n  const vca = Gain(ac, config)\n  return vca\n}\n","// # Oscillator\nimport { createAudioNode } from \"../synth\"\n\n/**\n * Create an Oscillator\n * A oscillator is always started\n */\nexport default function Osc (ac, state, start = true) {\n  const osc = createAudioNode(ac, \"Oscillator\", Osc.params)\n  if (start) osc.start(+start)\n  return osc\n}\nOsc.params = [\"type\", \"frequency\", \"detune\"]\n","// # Voltage Controlled Oscillator\nimport Osc from \"./osc\"\n\n/**\n * Create a VCO\n */\nexport default function VCO (ac, config) {\n  return Osc(ac, config)\n}\n","/** @module kit */\nimport { createAudioNode } from \"../synth\"\n\n/**\n * Create a Filter\n * @param {AudioContext} context\n * @param {Object} [config]\n */\nexport default function Filter (ac, state) {\n  return createAudioNode(ac, \"BiquadFilter\", Filter.params).update(state)\n}\nFilter.params = [\"type\", \"frequency\", \"detune\", \"Q\"]\n","// # Voltage Controlled Filter\nimport Filter from \"./filter\"\n\n/**\n * Create a VCF\n */\nexport default function VCF (ac, config) {\n  const filter = Filter(ac, config)\n  return filter\n}\n","import { instrument } from \"../synth\"\nimport Osc from \"../kit/osc\"\nimport Gain from \"../kit/gain\"\nimport GainEnvelope from \"../kit/gain-envelope\"\n\nexport function Kick (ac, state) {\n  state = Object.assign({}, Kick.defaults, state)\n  const kick = instrument({\n    oscillator: [ Osc(ac), \"envelope\" ],\n    envelope: [ GainEnvelope(ac), \"amp\" ],\n    amp: [ Gain(ac), \"output\" ]\n  }).update(state)\n\n  kick.trigger = (time) => {\n    kick.envelope.trigger(time)\n  }\n\n  return kick\n}\n\nKick.defaults = {\n  oscillator: {\n    type: \"sine\",\n    frequency: 48,\n  },\n  envelope: {\n    attack: 0.1,\n    decay: 0.2\n  },\n  amp: {\n    gain: 1,\n  }\n}\n\nexport default Kick\n","import { instrument } from \"../synth\"\nimport Osc from \"../kit/osc\"\nimport Noise from \"../kit/noise\"\nimport Gain from \"../kit/gain\"\nimport GainEnvelope from \"../kit/gain-envelope\"\n\nexport function Snare (ac, state) {\n  state = Object.assign({}, Snare.defaults, state)\n  const snare = instrument({\n    osc1: [ Osc(ac), \"oscEnv\" ],\n    osc2: [ Osc(ac), \"oscEnv\" ],\n    oscEnv: [ GainEnvelope(ac), \"amp\" ],\n    noise: [ Noise(ac), \"noiseEnv\" ],\n    noiseEnv: [ GainEnvelope(ac), \"amp\" ],\n    amp: [ Gain(ac), \"output\" ]\n  }).update(state)\n\n  snare.trigger = (time) => {\n    snare.oscEnv.trigger(time)\n    snare.noiseEnv.trigger(time)\n  }\n\n  return snare\n}\n\nSnare.defaults = {\n  osc1: {\n    type: \"sine\",\n    frequency: 238,\n  },\n  osc2: {\n    type: \"sine\",\n    frequency: 476,\n  },\n  oscEnv: {\n    gain: 0.5,\n    attack: 0.01,\n    release: 0.4,\n  },\n  noise: {\n    type: \"white\",\n  },\n  noiseEnv: {\n    attack: 0.01,\n    decay: 0.1,\n  },\n  amp: {\n    gain: 0.1,\n  },\n}\n\nexport default Snare\n","import { instrument } from \"../synth\"\nimport Noise from \"../kit/noise\"\nimport Gain from \"../kit/gain\"\nimport GainEnvelope from \"../kit/gain-envelope\"\n\nexport function Hat (ac, state) {\n  state = Object.assign({}, Hat.defaults, state)\n  const snare = instrument({\n    noise: [ Noise(ac), \"envelope\" ],\n    envelope: [ GainEnvelope(ac), \"amp\" ],\n    amp: [ Gain(ac), \"output\" ]\n  }).update(state)\n\n  snare.trigger = snare.envelope.trigger\n\n  return snare\n}\n\nHat.defaults = {\n  noise: {\n    type: \"white\"\n  },\n  envelope: {\n    attack: 0.01,\n    release: 0.1\n  },\n  amp: {\n    gain: 0.1,\n  }\n}\n\nexport default Hat\n","// # Cowbell\n\n// The Cowbell is based on the 808 design:\n\n// > \"the block diagram for the cowbell sound generator in the TR808 is a\n// relatively simple circuit, and uses just two of the six pulse-wave\n// oscillators that provide the basis of the machine's cymbal and hi-hat sounds.\n// The outputs from these pass through a pair of VCAs controlled by a contour\n// generator, and through a band-pass filter that removes the upper and lower\n// partials. Finally, the result is then amplified before reaching the outside\n// world.\"\n\n// Source of all quotes: https://github.com/micjamking/synth-secrets/blob/master/part-41.md\n\n// #### Oscillators\n\n// > \"We should be able to recreate this sound on any synth with two oscillators\n// and a band-pass (...) the sound comprises a pair of tones with fundamental\n// pitches of approximately 587Hz and 845Hz. With a frequency ratio of 1:1.44,\n// these are suitably clangy, and serve Roland's purpose well.\"\n\n// > Firstly, we select two oscillators, and set them with triangle-wave outputs\n// at frequencies of 587Hz and 845Hz\n\n// #### Filter\n\n// > \"then added a band-pass filter, finding that a centre frequency of 2.64kHz\n// worked well. The 12dB-per-octave option sounded a bit flabby, while the\n// 24dB-per-octave cutoff shaped the sound too severely, , so I chose the\n// 12dB-per-octave option and added a little resonance to accentuate the\n// partials close to the centre frequency\"\n\n// #### Envelope\n\n// > \"forms an envelope having abrupt level decay at the initial trailing edge\n// to emphasise attack effect\"\n\n// #### The instrument\nimport { instrument } from \"../synth\"\nimport Gain from \"../kit/gain\"\nimport Osc from \"../kit/osc\"\nimport GainEnvelope from \"../kit/gain-envelope\"\nimport Filter from \"../kit/filter\"\n\n/**\n * Create a Cowbell\n * @param {AudioContext} context\n * @param {Object} config\n * @return {AudioNode} the instrument\n * @example\n * const cowbell = Cowbell(ac)\n * cowbell.trigger(ac.currentTime + 1)\n */\nexport default function Cowbell (ac, state) {\n  if (state) state = Object.assign({}, Cowbell.defaultState, state)\n  else state = Cowbell.defaultState\n\n  const cowbell = instrument({\n    osc1: [ Osc(ac), \"env1\" ],\n    env1: [ GainEnvelope(ac), \"filter\" ],\n    osc2: [ Osc(ac), \"env2\" ],\n    env2: [ GainEnvelope(ac), \"filter\" ],\n    filter: [ Filter(ac), \"amp\" ],\n    amp: [ Gain(ac), \"output\" ]\n  }).update(state)\n\n  cowbell.trigger = (time) => {\n    cowbell.env1.trigger(time)\n    cowbell.env2.trigger(time)\n  }\n  return cowbell\n}\n\n// The Cowbell default parameters\nCowbell.defaultState = {\n  osc1: {\n    type: \"triangle\",\n    frequency: 587\n  },\n  env1: {\n    gain: 0.6,\n    attack: 0.01,\n    decay: 0.05,\n    sustain: 0,\n  },\n  osc2: {\n    type: \"triangle\",\n    frequency: 845,\n  },\n  env2: {\n    gain: 0.8,\n    attack: 0.1,\n    decay: 0.1,\n  },\n  filter: {\n    type: \"bandpass\",\n    frequency: 2640,\n    Q: 3.5,\n  },\n  amp: {\n    gain: 0.2\n  },\n}\n","// # Conga\nimport { instrument, withDefaults } from \"../synth\"\nimport Osc from \"../kit/osc\"\nimport Pulse from \"../kit/pulse\"\nimport Gain from \"../kit/gain\"\nimport GainEnvelope from \"../kit/gain-envelope\"\n\nexport default function Conga (ac, config) {\n  const state = withDefaults(config, Conga.defaults)\n  const conga = instrument({\n    oscillator: [ Osc(ac), \"envelope\" ],\n    envelope: [ GainEnvelope(ac), \"amp\" ],\n    pulse: [ Pulse(ac), \"amp\" ],\n    amp: [ Gain(ac), \"output\" ],\n  }).update(state)\n\n  conga.trigger = conga.envelope.trigger\n\n  return conga\n}\nConga.defaults = {\n  oscillator: {\n    frequency: 310\n  },\n  pulse: {\n    gain: 0.8,\n  },\n  envelope: {\n    decay: 0.31\n  },\n  amp: {\n    gain: 0.4\n  },\n}\n","// # Tom\nimport { instrument, withDefaults } from \"../synth\"\nimport Osc from \"../kit/osc\"\nimport Pulse from \"../kit/pulse\"\nimport Gain from \"../kit/gain\"\nimport GainEnvelope from \"../kit/gain-envelope\"\n\nexport default function Tom (ac, config) {\n  const state = withDefaults(config, Tom.defaults)\n  const tom = instrument({\n    oscillator: [ Osc(ac), \"envelope\" ],\n    envelope: [ GainEnvelope(ac), \"amp\" ],\n    pulse: [ Pulse(ac), \"amp\" ],\n    amp: [ Gain(ac), \"output\" ],\n  }).update(state)\n\n  tom.trigger = (time) => {\n    tom.pulse.trigger(time)\n    tom.envelope.trigger(time)\n  }\n  return tom\n}\nTom.defaults = {\n  oscillator: {\n    frequency: 165\n  },\n  pulse: {\n    gain: 0.1,\n  },\n  envelope: {\n    decay: 0.31\n  },\n  amp: {\n    gain: 1\n  },\n}\n","// # MonoSynth\nimport { instrument } from \"../synth\"\nimport VCO from \"../kit/vco\"\nimport VCF from \"../kit/vcf\"\nimport GainEnvelope from \"../kit/gain-envelope\"\nimport VCA from \"../kit/vca\"\n\n// A MonoSynth is a basic subtractive synth with one oscillator\n\n/**\n * Create a MonoSynth\n * @param {AudioContext} context\n * @param {Object} [config]\n */\nexport function MonoSynth (ac, state) {\n  state = Object.assign({}, MonoSynth.defaults, state)\n  const synth = instrument({\n    oscillator: [ VCO(ac), \"filter\" ],\n    filter: [ VCF(ac), \"envelope\" ],\n    envelope: [ GainEnvelope(ac), \"amp\" ],\n    amp: [ VCA(ac), \"output\" ]\n  }).update(state)\n\n  synth.trigger = (freq, time, dur) => {\n    time = time || ac.currentTime\n    if (freq) synth.oscillator.frequency.setValueAtTime(freq, time)\n    synth.envelope.trigger(time, dur)\n  }\n  return synth\n}\nMonoSynth.defaults = {\n  oscillator: {\n    type: \"sawtooth\"\n  },\n  filter: {\n    type: \"lowpass\",\n    frequency: 4000,\n  },\n  envelope: {\n    attack: 0.01,\n    decay: 0.1,\n    sustain: 0.8,\n    release: 0.3,\n  },\n  amp: {\n    gain: 0.5\n  }\n}\n\nexport default MonoSynth\n","\n// Functions\nexport * from \"./core\"\n\n// Kit\nexport { default as Gain } from \"./kit/gain\"\nexport { default as GainEnvelope } from \"./kit/gain-envelope\"\nexport { default as Noise } from \"./kit/noise\"\nexport { default as Sample } from \"./kit/sample\"\nexport { default as Pulse } from \"./kit/pulse\"\nexport { default as VCA } from \"./kit/vca\"\nexport { default as VCO } from \"./kit/vco\"\nexport { default as VCF } from \"./kit/vcf\"\n\n// Instruments\nexport { default as Kick } from \"./instruments/kick\"\nexport { default as Snare } from \"./instruments/snare\"\nexport { default as Hat } from \"./instruments/hat\"\nexport { default as Cowbell } from \"./instruments/cowbell\"\nexport { default as Conga } from \"./instruments/conga\"\nexport { default as Tom } from \"./instruments/tom\"\nexport { default as MonoSynth } from \"./instruments/monosynth\"\n"],"names":["isString","o","isFn","exp","Math","E","ampToGain","amp","plug","node","name","value","target","undefined","connect","setValueAtTime","update","newState","initialState","state","Object","assign","keys","forEach","newValue","key","prevValue","polyphony","init","options","max","maxVoices","voices","i","current","next","connected","object","connections","reduce","src","nodes","prev","connectWith","parent","Error","conn","dest","call","context","destination","apply","arguments","instrument","config","inst","names","to","setOutput","inspect","createAudioNode","ac","type","params","initParam","withDefaults","defaults","Gain","SILENCE","gain","GainEnvelope","env","defaultState","trigger","time","dur","currentTime","release","triggerAdsr","param","adsr","cancelScheduledValues","attack","peak","linearRampToValueAtTime","decay","sustain","hold","exponentialRampToValueAtTime","MonoBuffer","samples","generator","inverse","buffer","createBuffer","sampleRate","data","getChannelData","Source","source","Noise","duration","random","noise","loop","start","Sample","sample","onended","disconnect","Pulse","pulse","VCA","vca","Osc","osc","VCO","Filter","VCF","filter","Kick","kick","envelope","Snare","snare","oscEnv","noiseEnv","Hat","Cowbell","cowbell","env1","env2","Conga","conga","Tom","tom","MonoSynth","synth","freq","oscillator","frequency"],"mappings":"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"}