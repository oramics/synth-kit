{"version":3,"file":"synth-kit.js","sources":["../lib/synth.js","../lib/kit/gain.js","../lib/kit/gain-envelope.js","../lib/kit/mono-buffer.js","../lib/kit/source.js","../lib/kit/noise.js","../lib/kit/sample.js","../lib/kit/pulse.js","../lib/kit/vca.js","../lib/kit/osc.js","../lib/kit/vco.js","../lib/kit/vcf.js","../lib/kit/wave-shaper.js","../lib/kit/soft-clipper.js","../lib/instruments/kick.js","../lib/instruments/snare.js","../lib/kit/osc-bank.js","../lib/kit/filter.js","../lib/instruments/hihat.js","../lib/instruments/cowbell.js","../lib/instruments/conga.js","../lib/instruments/tom.js","../lib/instruments/monosynth.js","../lib/kit/feedback-comb-filter.js","../lib/instruments/pluck.js","../lib/instruments/tonewheel.js","../lib/index.js"],"sourcesContent":["// const isString = (o) => typeof o === \"string\"\nconst isFn = (o) => typeof o === \"function\"\nconst { exp, E } = Math\n\nexport function ampToGain (amp) {\n  return (exp(amp) - 1) / (E - 1)\n}\n\nexport function instrument (ac, config) {\n  const inst = {}\n  const names = Object.keys(config)\n\n  // create nodes\n  names.forEach(key => {\n    const Node = config[key][0]\n    inst[key] = typeof Node === \"function\" ? Node(ac) : Node\n  })\n  // connect nodes\n  names.forEach(key => {\n    const to = config[key][1]\n    const node = inst[key]\n    if (to === \"output\") connectWith(inst, node)\n    else connect(node, inst[to])\n  })\n\n  // API\n  // update: change the state of the instrument\n  inst.update = (state, time) => {\n    time = time || ac.currentTime\n    if (state) {\n      names.forEach(key => {\n        inst[key].update(state[key], time)\n      })\n    }\n    return inst\n  }\n  // inspect: get the current state of the instrument\n  inst.inspect = () => names.reduce((state, name) => {\n    state[name] = inst[name].inspect()\n    return state\n  }, {})\n  return inst\n}\n\nexport function createAudioNode (ac, type, params, initParam) {\n  const node = ac[\"create\" + type](initParam)\n  node.update = (state) => {\n    if (state) {\n      params.forEach(name => {\n        plug(node, name, state[name])\n      })\n    }\n    return node\n  }\n  node.inspect = () => params.reduce((state, name) => {\n    state[name] = inspect(node, name)\n    return state\n  }, {})\n  return node\n}\n\n// Get the value of a node parameter\nexport function inspect (node, name) {\n  const value = node[name]\n  return value && value.value !== undefined ? value.value : value\n}\n\n/**\n * Update a node property with a value. If the property is a parameter and\n * the value is a node, it will connect them\n */\nexport function plug (node, name, value) {\n  const target = node[name]\n  if (isFn(value)) value = value()\n  if (value === undefined || target === undefined) {\n    // ignore\n  } else if (target.value !== undefined) {\n    // it's a parameter\n    if (isFn(value.connect)) {\n      value.connect(target)\n    } else {\n      target.value = value\n      target.setValueAtTime(value, 0)\n    }\n  } else {\n    // replace the old value with a new one\n    node[name] = value\n  }\n}\n\nfunction connect (node, dest) {\n  if (dest) node.connect(dest)\n}\n\n/**\n * Set the output of a node (by creating a new connect function)\n */\nexport function connectWith (inst, node) {\n  inst.connect = (dest) => {\n    if (dest === true) dest = node.context.destination\n    node.connect(dest)\n    return inst\n  }\n}\n\nexport function withDefaults (config, defaults) {\n  return config ? Object.assign({}, defaults, config) : defaults\n}\n\n/**\n * Trigger an ADSR envelope over a param\n */\nexport function triggerAdsr (time, param, adsr) {\n  param.cancelScheduledValues(0)\n\n  // attack phase\n  const attack = adsr.attack || 0.01\n  const peak = adsr.peak || 1\n  param.setValueAtTime(0, time)\n  time += attack\n  console.log(\"attack\", attack, peak, time)\n  param.linearRampToValueAtTime(peak, time)\n\n  // decay phase\n  const decay = adsr.decay || 0.01\n  const sustain = adsr.sustain || 0\n  time += decay\n  param.linearRampToValueAtTime(sustain, time)\n\n  // hold phase\n  const hold = adsr.hold || 0\n  if (hold) {\n    time += hold\n    param.setValueAtTime(sustain, time)\n  }\n\n  const release = time => {\n    if (sustain) {\n      param.setValueAtTime(time, sustain)\n      const release = adsr.release || 0\n      console.log(\"Trigger release\", release, time)\n      time += release\n      param.exponentialRampToValueAtTime(0.00001, time)\n    }\n  }\n\n  // trigger release if hold is specified\n  if (hold) {\n    release(time)\n  }\n\n  return release\n}\n","// # Gain\nimport { createAudioNode } from \"../synth\"\n\n// Gain produces changes in volume\n\n/**\n * Create a Gain node.\n */\nexport default function Gain (ac, state) {\n  return createAudioNode(ac, \"Gain\", Gain.params).update(state)\n}\nGain.params = [\"gain\"]\n","import { triggerAdsr } from \"../synth\"\nimport Gain from \"./gain\"\n\nconst SILENCE = { gain: 0 }\n/**\n * Create a Gain envelope. Any audio source can be connected to an\n * audio envelope.\n *\n * @example\n * const [osc, adsr] = connect(Osc(ac), GainEnvelope(ac))\n * adsr.trigger()\n */\nexport default function GainEnvelope (ac, state) {\n  const env = Gain(ac, SILENCE)\n  state = Object.assign({}, GainEnvelope.defaultState, state)\n\n  env.update = (newState) => {\n    state = Object.assign(state, newState)\n    return env\n  }\n  env.inspect = () => state\n\n  env.trigger = function (time, dur) {\n    if (!time) time = ac.currentTime\n    const release = triggerAdsr(time, env.gain, state)\n    if (dur) release(time + dur)\n    return release\n  }\n  return env\n}\n\nGainEnvelope.params = [\n  \"base\",\n  \"peak\",\n  \"attack\",\n  \"decay\",\n  \"sustain\",\n  \"release\",\n]\n\n// default values\nGainEnvelope.defaultState = {\n  peak: 1,\n  attack: 0.01,\n  decay: 0.2,\n}\n","// # Buffer (Mono)\n\n/**\n * Create a MonoBuffer using a generator function\n */\nexport default function MonoBuffer (ac, samples, generator, inverse = false) {\n  const buffer = ac.createBuffer(1, samples, ac.sampleRate)\n  const data = buffer.getChannelData(0)\n  for (let i = 0; i < samples; i++) {\n    data[i] = generator(inverse ? samples - i : i)\n  }\n  return buffer\n}\n","// # Source\nimport { createAudioNode } from \"../synth\"\n\n// Create a node that plays audio from a buffer\n\n/**\n * Create a (Buffer)Source node\n */\nexport default function Source (ac, buffer, state) {\n  const source = createAudioNode(ac, \"BufferSource\", Source.params)\n  source.update(state)\n  source.buffer = buffer\n  return source\n}\n\nSource.params = [\"detune\", \"loop\", \"loopStart\", \"loopEnd\", \"playbackRate\"]\n","// # Noise\nimport MonoBuffer from \"./mono-buffer\"\nimport Source from \"./source\"\n\n/**\n * Create a Noise oscillator\n *\n * @param {AudioContext} ac\n * @param {Object} [config]\n * - type: the noise type. Can be \"white\" (by default)\n * - duration: the duration in seconds\n * @return {AudioNode} the noise node\n */\nexport default function Noise (ac, config) {\n  config = Object.assign({}, Noise.defaults, config)\n  const samples = config.duration * ac.sampleRate\n  const buffer = MonoBuffer(ac, samples, () => Math.random() * 2 - 1)\n  const noise = Source(ac, buffer, { loop: true })\n  noise.start()\n  return noise\n}\nNoise.defaults = {\n  duration: 1,\n  loop: true\n}\n","// # Sample\nimport Gain from \"./gain\"\nimport Source from \"./source\"\n\n// A sample is a re-triggerable audio buffer source.\n\n/**\n * Create a Sample\n *\n * @param {AudioContext} context\n * @param {AudioBuffer} buffer\n * @param {Object} [state]\n */\nexport default function Sample (ac, buffer, config) {\n  const sample = Gain(ac)\n\n  sample.trigger = (time, dur) => {\n    if (!time) time = ac.currentTime\n    const source = Source(ac, buffer, config)\n    source.connect(sample)\n    source.onended = () => {\n      if (sample.onended) sample.onended()\n      source.disconnect()\n    }\n    source.start(time)\n  }\n  return sample\n}\n\nSample.state = {\n  gain: 0.8\n}\n","// # Pulse\nimport MonoBuffer from \"./mono-buffer\"\nimport Sample from \"./sample\"\n\n/**\n * Create a Pulse audio node\n *\n * @param {AudioContext} ac\n * @param {Object} [config]\n * - type: the pulse type. Can be \"white\" (by default)\n * - duration: the duration in seconds\n * @return {AudioNode} the pulse node\n */\nexport default function Pulse (ac, config) {\n  config = Object.assign({}, Pulse.defaults, config)\n  const samples = config.duration * ac.sampleRate\n  const buffer = MonoBuffer(ac, samples, () => Math.random() * 2 - 1)\n  const pulse = Sample(ac, buffer)\n  return pulse\n}\nPulse.defaults = {\n  duration: 0.001\n}\n","// Voltage controlled amplified\nimport Gain from \"./gain\"\n\n/**\n * Create a VCA\n */\nexport default function VCA (ac, config) {\n  const vca = Gain(ac, config)\n  return vca\n}\n","// # Oscillator\nimport { createAudioNode } from \"../synth\"\n\n/**\n * Create an Oscillator\n * A oscillator is always started\n */\nexport default function Osc (ac, state, start = true) {\n  const osc = createAudioNode(ac, \"Oscillator\", Osc.params)\n  if (start) osc.start(+start)\n  return osc\n}\nOsc.params = [\"type\", \"frequency\", \"detune\"]\n","// # Voltage Controlled Oscillator\nimport Osc from \"./osc\"\n\n/**\n * Create a VCO\n */\nexport default function VCO (ac, config) {\n  return Osc(ac, config)\n}\n","// # Voltage Controlled Filter\nimport { createAudioNode, triggerAdsr } from \"../synth\"\n\n// A voltage controlled filter is a BiquadFilter with a\n// AD (attack-decay) envelope connected to it's frequency\n\n/**\n * Create a VCF\n */\nexport default function VCF (ac, state) {\n  const filter = createAudioNode(ac, \"BiquadFilter\", VCF.params)\n  // set the default parameters so plug work with them\n  filter.attack = 0.01\n  filter.decay = 0.1\n  filter.octaves = 2\n\n  filter.trigger = function (time, dur) {\n    if (!time) time = ac.currentTime\n    this.base = this.frequency.value\n    this.peak = this.base * this.octaves\n    const release = triggerAdsr(time, filter.frequency, filter)\n    if (dur) release(time + dur)\n    return release\n  }\n  return filter.update(state)\n}\nVCF.params = [\"type\", \"frequency\", \"detune\", \"Q\",\n  \"attack\", \"decay\", \"octaves\"]\nVCF.defaults = {\n  type: \"lowpass\",\n  frequency: 880,\n  attack: 0.1,\n  decay: 0.5,\n  octaves: 2\n}\n","// # WaveShaper\n\n/**\n * Create a WaveShaper node.\n */\nexport default function WaveShaper (ac, curve, oversample = \"none\") {\n  const shaper = ac.createWaveShaper()\n  shaper.curve = curve\n  shaper.oversample = oversample\n  return shaper\n}\n","// # SoftClipper\nimport { createAudioNode } from \"../synth\"\nimport WaveShaper from \"./wave-shaper\"\n\n// ## Structure\n// Input -> Gain -> WaveShaper -> Output\n\nlet curve = null\n\n/**\n * Create a SoftClipper\n */\nexport default function SoftClipper (ac, state) {\n  const clipper = createAudioNode(ac, \"Gain\", SoftClipper.params)\n  clipper.drive = clipper.gain\n  if (!curve) curve = createSoftClipperCurve()\n  const shaper = WaveShaper(ac, curve, \"2x\")\n  clipper.connect(shaper)\n  clipper.connect = shaper.connect.bind(shaper)\n  return clipper.update(state)\n}\nSoftClipper.params = [\"drive\"]\n\nfunction createSoftClipperCurve () {\n  const n = 65536\n  const curve = new Float32Array(n)\n  for (let i = 0; i < n; i++) {\n    const x = (i - (n / 2)) / (n / 2)\n    curve[i] = Math.tanh(x)\n  }\n  return curve\n}\n","import { instrument } from \"../synth\"\nimport Osc from \"../kit/osc\"\nimport Gain from \"../kit/gain\"\nimport Pulse from \"../kit/pulse\"\nimport SoftClipper from \"../kit/soft-clipper\"\nimport GainEnvelope from \"../kit/gain-envelope\"\nimport VCF from \"../kit/vcf\"\n\nexport function Kick (ac, state) {\n  state = Object.assign({}, Kick.defaults, state)\n  const kick = instrument(ac, {\n    oscillator: [ Osc, \"envelope\" ],\n    click: [ Pulse, \"envelope\" ],\n    envelope: [ GainEnvelope, \"vcf\" ],\n    vcf: [ VCF, \"clipper\" ],\n    clipper: [ SoftClipper, \"amp\" ],\n    amp: [ Gain, \"output\" ],\n  }).update(state)\n\n  kick.trigger = (time) => {\n    kick.click.trigger(time)\n    kick.envelope.trigger(time)\n  }\n\n  return kick\n}\n\nKick.defaults = {\n  oscillator: {\n    type: \"sine\",\n    frequency: 48,\n  },\n  envelope: {\n    attack: 0.1,\n    decay: 0.2,\n  },\n  vcf: {\n    type: \"lowpass\",\n    frequency: 48,\n    envelope: {\n      base: 48,\n      peak: 100,\n      attack: 0.001,\n      decay: 0.60,\n    }\n  },\n  amp: {\n    gain: 1,\n  }\n}\n\nexport default Kick\n","import { instrument } from \"../synth\"\nimport Osc from \"../kit/osc\"\nimport Noise from \"../kit/noise\"\nimport Gain from \"../kit/gain\"\nimport GainEnvelope from \"../kit/gain-envelope\"\n\nexport function Snare (ac, state) {\n  state = Object.assign({}, Snare.defaults, state)\n  const snare = instrument(ac, {\n    osc1: [ Osc, \"oscEnv\" ],\n    osc2: [ Osc, \"oscEnv\" ],\n    oscEnv: [ GainEnvelope, \"amp\" ],\n    noise: [ Noise, \"noiseEnv\" ],\n    noiseEnv: [ GainEnvelope, \"amp\" ],\n    amp: [ Gain, \"output\" ]\n  }).update(state)\n\n  snare.trigger = (time) => {\n    snare.oscEnv.trigger(time)\n    snare.noiseEnv.trigger(time)\n  }\n\n  return snare\n}\n\nSnare.defaults = {\n  osc1: {\n    type: \"sine\",\n    frequency: 238,\n  },\n  osc2: {\n    type: \"sine\",\n    frequency: 476,\n  },\n  oscEnv: {\n    gain: 0.5,\n    attack: 0.01,\n    release: 0.4,\n  },\n  noise: {\n    type: \"white\",\n  },\n  noiseEnv: {\n    attack: 0.01,\n    decay: 0.1,\n  },\n  amp: {\n    gain: 0.5,\n  },\n}\n\nexport default Snare\n","// # Oscillator Bank\nimport Gain from \"./gain\"\nimport Osc from \"./osc\"\n\nconst conn = (src, dest) => {\n  src.connect(dest)\n  return src\n}\n\n/**\n * Create a OscBank\n */\nexport default function OscBank (ac, ratios, config) {\n  if (!ratios) throw Error(\"OscBank requires an array 'ratios' in constructor\")\n\n  // Setup internal state\n  const state = Object.assign({}, OscBank.defaults, config)\n  initState(state, ratios)\n\n  // Create the audio nodes\n  const output = Gain(ac)\n  const amps = ratios.map(_ => {\n    const amp = conn(Gain(ac), output)\n    return amp\n  })\n  const oscs = amps.map((gain, i) => {\n    const osc = conn(Osc(ac), gain)\n    osc.type = state.types[i]\n    return osc\n  })\n  const bank = { output, amps, oscs }\n\n  // API\n  bank.connect = (dest) => conn(output, dest)\n  bank.update = (config, time) => {\n    if (typeof config === \"number\" || typeof config === \"string\") {\n      state.frequency = +config\n      updateFrequencies(bank, state, time)\n    } else if (config) {\n      time = time || ac.currentTime\n      if (config.gains) {\n        updateArray(state.gains, config.gains)\n        updateGains(bank, state, time)\n      }\n      if (config.frequency !== undefined) {\n        state.frequency = config.frequency\n        updateFrequencies(bank, state, time)\n      }\n    }\n    return bank\n  }\n  bank.inspect = () => state\n  return bank.update(state)\n}\nOscBank.defaults = {\n  frequency: 440,\n  gains: [0],\n  types: [\"sine\"],\n  compensate: true,\n}\n\nfunction initState (state, ratios) {\n  const gains = state.gains\n  const types = state.types\n  state.gains = ratios.map((_, i) => gains[i % gains.length])\n  state.types = ratios.map((_, i) => types[i % types.length])\n  state.ratios = ratios\n}\n\nfunction updateFrequencies ({ oscs }, { ratios, frequency }, time) {\n  console.log(\"UPDATE FREQS\", ratios, frequency)\n  oscs.forEach((osc, i) => {\n    osc.frequency.setValueAtTime(ratios[i] * frequency, time)\n  })\n}\n\nfunction updateGains ({ amps }, { gains }, time) {\n  amps.forEach((amp, i) => {\n    if (gains[i] !== undefined) amp.gain.setValueAtTime(gains[i], time)\n  })\n}\n\nfunction updateArray (prev, next) {\n  if (next) {\n    const len = prev.length\n    for (var i = 0; i < len; i++) {\n      if (next[i] !== undefined) prev[i] = next[i]\n    }\n  }\n}\n","/** @module kit */\nimport { createAudioNode } from \"../synth\"\n\n/**\n * Create a Filter\n * @param {AudioContext} context\n * @param {Object} [config]\n */\nexport default function Filter (ac, state) {\n  return createAudioNode(ac, \"BiquadFilter\", Filter.params).update(state)\n}\nFilter.params = [\"type\", \"frequency\", \"detune\", \"Q\"]\n","// # HiHat\nimport { instrument } from \"../synth\"\nimport OscBank from \"../kit/osc-bank\"\nimport Filter from \"../kit/filter\"\nimport Gain from \"../kit/gain\"\nimport GainEnvelope from \"../kit/gain-envelope\"\n\n// A HiHat modeled after the 808 design\n\n// **References**\n// - Synth secrets: https://github.com/micjamking/synth-secrets/blob/master/part-40.md\n\nconst BASE_FQ = 400\nconst RATIOS = [263, 400, 421, 474, 587, 845].map(f => f / BASE_FQ)\n\n/**\n * Create a HiHat\n */\nexport function HiHat (ac, state) {\n  state = Object.assign({}, HiHat.defaults, state)\n\n  // ## Architecture\n  const hihat = instrument(ac, {\n    // six square-wave oscillators\n    bank: [OscBank(ac, RATIOS, state.bank), \"midFilter\"],\n    // band pass filter\n    midFilter: [Filter, \"envelope\"],\n    // AD envelope\n    envelope: [GainEnvelope, \"hiFilter\"],\n    // hipass filter\n    hiFilter: [Filter, \"amp\"],\n    // amplifier\n    amp: [Gain, \"output\"]\n  }).update(state)\n\n  // # API\n  // trigger\n  hihat.trigger = hihat.envelope.trigger\n\n  console.log(hihat)\n\n  return hihat\n}\n\nHiHat.defaults = {\n  bank: {\n    frequency: BASE_FQ,\n    types: [\"square\"],\n    gains: [0.5],\n    compensate: false,\n  },\n  midFilter: {\n    type: \"bandpass\",\n    frequency: 10000,\n  },\n  envelope: {\n    attack: 0.01,\n    decay: 0.1,\n  },\n  hiFilter: {\n    type: \"highpass\",\n    frequency: 8000,\n  },\n  amp: {\n    gain: 0.8,\n  },\n}\n\nexport default HiHat\n","// # Cowbell\n\n// The Cowbell is based on the 808 design:\n\n// > \"the block diagram for the cowbell sound generator in the TR808 is a\n// relatively simple circuit, and uses just two of the six pulse-wave\n// oscillators that provide the basis of the machine's cymbal and hi-hat sounds.\n// The outputs from these pass through a pair of VCAs controlled by a contour\n// generator, and through a band-pass filter that removes the upper and lower\n// partials. Finally, the result is then amplified before reaching the outside\n// world.\"\n\n// Source of all quotes: https://github.com/micjamking/synth-secrets/blob/master/part-41.md\n\n// #### Oscillators\n\n// > \"We should be able to recreate this sound on any synth with two oscillators\n// and a band-pass (...) the sound comprises a pair of tones with fundamental\n// pitches of approximately 587Hz and 845Hz. With a frequency ratio of 1:1.44,\n// these are suitably clangy, and serve Roland's purpose well.\"\n\n// > Firstly, we select two oscillators, and set them with triangle-wave outputs\n// at frequencies of 587Hz and 845Hz\n\n// #### Filter\n\n// > \"then added a band-pass filter, finding that a centre frequency of 2.64kHz\n// worked well. The 12dB-per-octave option sounded a bit flabby, while the\n// 24dB-per-octave cutoff shaped the sound too severely, , so I chose the\n// 12dB-per-octave option and added a little resonance to accentuate the\n// partials close to the centre frequency\"\n\n// #### Envelope\n\n// > \"forms an envelope having abrupt level decay at the initial trailing edge\n// to emphasise attack effect\"\n\n// #### The instrument\nimport { instrument } from \"../synth\"\nimport Gain from \"../kit/gain\"\nimport Osc from \"../kit/osc\"\nimport GainEnvelope from \"../kit/gain-envelope\"\nimport Filter from \"../kit/filter\"\n\n/**\n * Create a Cowbell\n * @param {AudioContext} context\n * @param {Object} config\n * @return {AudioNode} the instrument\n * @example\n * const cowbell = Cowbell(ac)\n * cowbell.trigger(ac.currentTime + 1)\n */\nexport default function Cowbell (ac, state) {\n  if (state) state = Object.assign({}, Cowbell.defaultState, state)\n  else state = Cowbell.defaultState\n\n  const cowbell = instrument(ac, {\n    osc1: [ Osc, \"env1\" ],\n    env1: [ GainEnvelope, \"filter\" ],\n    osc2: [ Osc, \"env2\" ],\n    env2: [ GainEnvelope, \"filter\" ],\n    filter: [ Filter, \"amp\" ],\n    amp: [ Gain, \"output\" ]\n  }).update(state)\n\n  cowbell.trigger = (time) => {\n    cowbell.env1.trigger(time)\n    cowbell.env2.trigger(time)\n  }\n  return cowbell\n}\n\n// The Cowbell default parameters\nCowbell.defaultState = {\n  osc1: {\n    type: \"triangle\",\n    frequency: 587\n  },\n  env1: {\n    gain: 0.6,\n    attack: 0.01,\n    decay: 0.05,\n    sustain: 0,\n  },\n  osc2: {\n    type: \"triangle\",\n    frequency: 845,\n  },\n  env2: {\n    gain: 0.8,\n    attack: 0.1,\n    decay: 0.1,\n  },\n  filter: {\n    type: \"bandpass\",\n    frequency: 2640,\n    Q: 3.5,\n  },\n  amp: {\n    gain: 0.2\n  },\n}\n","// # Conga\nimport { instrument, withDefaults } from \"../synth\"\nimport Osc from \"../kit/osc\"\nimport Pulse from \"../kit/pulse\"\nimport Gain from \"../kit/gain\"\nimport GainEnvelope from \"../kit/gain-envelope\"\n\nexport default function Conga (ac, config) {\n  const state = withDefaults(config, Conga.defaults)\n  const conga = instrument(ac, {\n    oscillator: [ Osc, \"envelope\" ],\n    envelope: [ GainEnvelope, \"amp\" ],\n    pulse: [ Pulse, \"amp\" ],\n    amp: [ Gain, \"output\" ],\n  }).update(state)\n\n  conga.trigger = conga.envelope.trigger\n\n  return conga\n}\nConga.defaults = {\n  oscillator: {\n    frequency: 310\n  },\n  pulse: {\n    gain: 0.8,\n  },\n  envelope: {\n    decay: 0.31\n  },\n  amp: {\n    gain: 0.4\n  },\n}\n","// # Tom\nimport { instrument, withDefaults } from \"../synth\"\nimport Osc from \"../kit/osc\"\nimport Pulse from \"../kit/pulse\"\nimport Gain from \"../kit/gain\"\nimport GainEnvelope from \"../kit/gain-envelope\"\n\nexport default function Tom (ac, config) {\n  const state = withDefaults(config, Tom.defaults)\n  const tom = instrument(ac, {\n    oscillator: [ Osc, \"envelope\" ],\n    envelope: [ GainEnvelope, \"amp\" ],\n    pulse: [ Pulse, \"amp\" ],\n    amp: [ Gain, \"output\" ],\n  }).update(state)\n\n  tom.trigger = (time) => {\n    tom.pulse.trigger(time)\n    tom.envelope.trigger(time)\n  }\n  return tom\n}\nTom.defaults = {\n  oscillator: {\n    frequency: 165\n  },\n  pulse: {\n    gain: 0.1,\n  },\n  envelope: {\n    decay: 0.31\n  },\n  amp: {\n    gain: 1\n  },\n}\n","// # MonoSynth\nimport { instrument } from \"../synth\"\nimport VCO from \"../kit/vco\"\nimport VCF from \"../kit/vcf\"\nimport GainEnvelope from \"../kit/gain-envelope\"\nimport VCA from \"../kit/vca\"\n\n// A MonoSynth is a basic subtractive synth with one oscillator\n\n/**\n * Create a MonoSynth\n * @param {AudioContext} context\n * @param {Object} [config]\n */\nexport function MonoSynth (ac, state) {\n  state = Object.assign({}, MonoSynth.defaults, state)\n  const synth = instrument(ac, {\n    oscillator: [ VCO, \"vcf\" ],\n    vcf: [ VCF, \"envelope\" ],\n    envelope: [ GainEnvelope, \"amp\" ],\n    amp: [ VCA, \"output\" ]\n  }).update(state)\n\n  synth.trigger = (freq, time, dur) => {\n    time = time || ac.currentTime\n    if (freq) {\n      synth.oscillator.frequency.setValueAtTime(freq, time)\n      synth.vcf.frequency.setValueAtTime(freq / 2, time)\n    }\n    synth.vcf.trigger(time, dur)\n    synth.envelope.trigger(time, dur)\n  }\n  return synth\n}\nMonoSynth.defaults = {\n  oscillator: {\n    type: \"sawtooth\"\n  },\n  vcf: {\n    type: \"lowpass\",\n    Q: 2,\n    attack: 0.1,\n    octaves: 2,\n    decay: 1,\n  },\n  envelope: {\n    attack: 0.1,\n    decay: 0.5,\n    sustain: 0.8,\n    release: 2,\n  },\n  amp: {\n    gain: 0.5\n  }\n}\n\nexport default MonoSynth\n","// # Feedback Comb Filter\nimport { createAudioNode } from \"../synth\"\nimport Gain from \"./gain\"\n\n// The feedback comb filter can be used as a computational physical model of\n// a series of echoes, exponentially decaying and uniformly spaced in time.\n\n// #### References\n\n// - https://ccrma.stanford.edu/~jos/pasp/Feedback_Comb_Filters.html\n\n/**\n * Create a FeedbackCombFilter\n */\nexport default function FeedbackCombFilter (ac, config) {\n  config = Object.assign({}, FeedbackCombFilter.defaults, config)\n  const feedback = Gain(ac, config)\n  // Create a delay with an extra param\n  const filter = createAudioNode(ac, \"Delay\",\n    FeedbackCombFilter.params, config.maxDelay)\n  filter.resonance = feedback.gain\n  filter.connect(feedback)\n  feedback.connect(filter)\n  return filter.update(config)\n}\nFeedbackCombFilter.params = [\"delayTime\", \"resonance\"]\nFeedbackCombFilter.defaults = {\n  maxDelay: 1,\n  delayTime: 0.1,\n  resonance: 0.5\n}\n","// # Pluck synth\nimport { instrument } from \"../synth\"\nimport Gain from \"../kit/gain\"\nimport Noise from \"../kit/noise\"\nimport FeedbackCombFilter from \"../kit/feedback-comb-filter\"\nimport GainEnvelope from \"../kit/gain-envelope\"\n\n// Poor's man version of Karplus-String string synthesis\n\nexport default function Pluck (ac, config) {\n  const pluck = instrument(ac, {\n    noise: [ Noise, \"envelope\" ],\n    envelope: [ GainEnvelope, \"combFilter\" ],\n    combFilter: [ FeedbackCombFilter, \"amp\" ],\n    amp: [ Gain, \"output\" ],\n  }).update(config)\n\n  pluck.trigger = (freq, time, dur) => {\n    const delay = 1 / freq\n    pluck.combFilter.delayTime.setValueAtTime(delay, time)\n    pluck.envelope.trigger(time)\n  }\n  return pluck\n}\n\nPluck.defaults = {\n  noise: {\n    type: \"white\",\n  },\n  envelope: {\n    attack: 0.1,\n    decay: 0.1,\n  },\n  combFilter: {\n    delayTime: 0.2,\n    resonance: 0.9,\n  }\n}\n","// Tonewheel _aka clonewheel_ synth\nimport { instrument } from \"../synth\"\nimport Gain from \"../kit/gain\"\nimport Pulse from \"../kit/pulse\"\nimport GainEnvelope from \"../kit/gain-envelope\"\nimport OscBank from \"../kit/osc-bank\"\n\n// This **will be** an simple model of a Hammond B3 organ. Reproducing the sound\n// of that instrument is a complex task, I\"ll only recreate a very simplified\n// model. Any sonic resemblance with the original is just coincidence.\n\n// **References**\n\n// https://teichman.org/blog/2011/05/roto.html\n// http://electricdruid.net/technical-aspects-of-the-hammond-organ/\n// http://www.dairiki.org/HammondWiki/OriginalHammondLeslieFaq\n// http://www.stefanv.com/electronics/hammond_drawbar_science.html\n\n// http://electricdruid.net/technical-aspects-of-the-hammond-organ/\nconst RATIOS = [0.5, 1.498823530, 1, 2, 2.997647060, 4, 5.040941178, 5.995294120, 8]\n\n// ## Drawbars\n\n// The sound on a tonewheel Hammond organ is varied through the manipulation of\n// drawbars. A drawbar is a metal slider that controls the volume of a\n// particular sound component, in a similar way to a fader on an audio mixing\n// board. As a drawbar is incrementally pulled out, it increases the volume of\n// its sound. When pushed all the way in, the volume is decreased to zero\n\n// ## Presets\n// http://www.dairiki.org/HammondWiki/PopularDrawbarRegistrations\nconst PRESETS = {\n  gospel: toState(\"88 8000 008\"),\n  blues: toState(\"88 8800 000\"),\n  bluesB: toState(\"88 5324 588\"),\n  booker: toState(\"88 8630 000\"),\n  onions: toState(\"80 8800 008\"),\n  smith: toState(\"88 8000 000\"),\n  mcgriff: toState(\"86 8600 006\"),\n  errol: toState(\"80 0008 888\"),\n  genesis: toState(\"33 6866 330\"),\n}\n\n// Given a preset, return a state fragment\nfunction toState (preset) {\n  if (preset) {\n    const norm = (preset.replace(/[^012345678]/g, \"\") + \"000000000\").slice(0, 9)\n    const gains = norm.split(\"\").map((n) => Math.abs(+n / 8))\n    return {\n      bank: { gains }\n    }\n  }\n}\n\n// ## Instrument\nexport default function Tonewheel (ac, preset) {\n  preset = preset ? toState(preset) : PRESETS[\"smith\"]\n  const state = Object.assign({}, Tonewheel.defaults, preset)\n  // Tonewheel instrument output\n  const tw = instrument(ac, {\n    bank: [OscBank(ac, RATIOS), \"envelope\"],\n    envelope: [GainEnvelope, \"amp\"],\n    click: [Pulse, \"output\"],\n    amp: [Gain, \"output\"],\n  }).update(state)\n\n  tw.setPreset = (preset, time) => {\n    const newState = PRESETS[preset] || toState(preset)\n    tw.update(newState)\n  }\n\n  // API\n  tw.trigger = (freq, time, dur) => {\n    tw.bank.update(freq, time)\n    tw.envelope.trigger(time, dur)\n    return tw\n  }\n\n  return tw\n}\nTonewheel.defaults = {\n  bank: {\n    types: [\"sine\"],\n  },\n  amp: {\n    gain: 0.8,\n  }\n}\n","\n// Kit\nexport { default as Gain } from \"./kit/gain\"\nexport { default as GainEnvelope } from \"./kit/gain-envelope\"\nexport { default as Noise } from \"./kit/noise\"\nexport { default as Sample } from \"./kit/sample\"\nexport { default as Pulse } from \"./kit/pulse\"\nexport { default as VCA } from \"./kit/vca\"\nexport { default as VCO } from \"./kit/vco\"\nexport { default as VCF } from \"./kit/vcf\"\n\n// Instruments\nexport { default as Kick } from \"./instruments/kick\"\nexport { default as Snare } from \"./instruments/snare\"\nexport { default as HiHat } from \"./instruments/hihat\"\nexport { default as Cowbell } from \"./instruments/cowbell\"\nexport { default as Conga } from \"./instruments/conga\"\nexport { default as Tom } from \"./instruments/tom\"\nexport { default as MonoSynth } from \"./instruments/monosynth\"\nexport { default as Pluck } from \"./instruments/pluck\"\nexport { default as Tonewheel } from \"./instruments/tonewheel\"\n"],"names":["isFn","o","instrument","ac","config","inst","names","Object","keys","forEach","Node","key","to","node","connectWith","connect","update","state","time","currentTime","inspect","reduce","name","createAudioNode","type","params","initParam","value","undefined","plug","target","setValueAtTime","dest","context","destination","withDefaults","defaults","assign","triggerAdsr","param","adsr","cancelScheduledValues","attack","peak","log","linearRampToValueAtTime","decay","sustain","hold","release","exponentialRampToValueAtTime","Gain","SILENCE","gain","GainEnvelope","env","defaultState","newState","trigger","dur","MonoBuffer","samples","generator","inverse","buffer","createBuffer","sampleRate","data","getChannelData","i","Source","source","Noise","duration","Math","random","noise","loop","start","Sample","sample","onended","disconnect","Pulse","pulse","VCA","vca","Osc","osc","VCO","VCF","filter","octaves","base","frequency","WaveShaper","curve","oversample","shaper","createWaveShaper","SoftClipper","clipper","drive","createSoftClipperCurve","bind","n","Float32Array","x","tanh","Kick","kick","click","envelope","Snare","snare","oscEnv","noiseEnv","conn","src","OscBank","ratios","Error","output","amps","map","amp","oscs","types","bank","gains","initState","_","length","updateFrequencies","updateGains","updateArray","prev","next","len","Filter","BASE_FQ","RATIOS","f","HiHat","hihat","Cowbell","cowbell","env1","env2","Conga","conga","Tom","tom","MonoSynth","synth","freq","oscillator","vcf","FeedbackCombFilter","feedback","maxDelay","resonance","Pluck","pluck","delay","combFilter","delayTime","PRESETS","toState","preset","norm","replace","slice","split","abs","Tonewheel","tw","setPreset"],"mappings":"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"}